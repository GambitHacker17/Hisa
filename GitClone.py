#meta developer: @MartyyyK

import logging
import requests
from hisa import loader, utils
import time

logger=logging.getLogger(__name__)

class GitClone(loader.Module):
    """Cloning codes from GitHub using raw links"""
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "file_name",
                "clone.py",
                lambda:
                self.strings("cfg_file"),
            ),
        )

    strings={
        "name": "GitClone",
        "no_args": "<emoji document_id=5321074831720982832>‚ö†Ô∏è</emoji> Don't have any args",
        "invalid_url": "<emoji document_id=5305724700209454594>‚ùé</emoji> Invalid link format.",
        "cloning": "<emoji document_id=5303382121967001310>üíª</emoji> Cloning code..",
        "success": "<emoji document_id=5305417687357203905>‚úÖ</emoji> <b>The code was successfully cloned into the file</b>",
        "cfg_file": "Choose a file name with format.\nExample:  file.js, file.py, file.java etc.",
    }

    strings_ru={
        "no_args": "<emoji document_id=5321074831720982832>‚ö†Ô∏è</emoji> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
        "invalid_url": "<emoji document_id=5305724700209454594>‚ùé</emoji> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.",
        "cloning": "<emoji document_id=5303382121967001310>üíª</emoji> –ö–ª–æ–Ω–∏—Ä—É—é –∫–æ–¥..",
        "success": "<emoji document_id=5305417687357203905>‚úÖ</emoji> <b>–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–π–ª</b>",
        "cfg_file": "–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä: file.js, main.py, clone.java –∏ —Ç.–¥.",
    }
    
    @loader.command(ru_doc="-> –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è raw —Å—Å—ã–ª–∫—É")
    async def gitclcmd(self, message):
        """-> Clone code from repository using raw link"""
        args=utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("no_args"))
        else:
            response=requests.get(args)
            name=self.config["file_name"]
            if response.status_code==200:
                await utils.answer(message, self.strings("cloning"))
                time.sleep(1)
                with open(name, 'wb') as file:
                    file.write(response.content)
                await utils.answer_file(message, name, self.strings("success"))
            else:
                await utils.answer(message, self.strings("invalid_url"))