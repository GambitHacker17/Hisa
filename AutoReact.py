# meta developer: @MartyyyK

from telethon import events, types
from .. import loader, utils

@loader.tds
class AutoReactMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    strings = {
        "name": "AutoReact",
        "enabled": "‚úÖ –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ",
        "disabled": "üö´ –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ",
        "reaction_set": "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è: {}",
        "no_reaction": "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —ç–º–æ–¥–∑–∏ –∏–ª–∏ –µ–≥–æ ID –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏",
        "premium_set": "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ Premium —Ä–µ–∞–∫—Ü–∏—è –ø–æ ID: {}",
        "all_pm_enabled": "‚úÖ –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤–æ –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö",
        "all_pm_disabled": "üö´ –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã –≤–æ –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "current_reaction",
            "üëç",
            "–¢–µ–∫—É—â–∞—è —Ä–µ–∞–∫—Ü–∏—è (—ç–º–æ–¥–∑–∏ –∏–ª–∏ ID)",
            
            "is_premium",
            False,
            "–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∞–∫—Ü–∏—è Premium —ç–º–æ–¥–∑–∏"
        )

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        self.active_chats = self.get("active_chats", {})
        self.all_pm = self.get("all_pm", False)

    def get_active_chats(self):
        return self.active_chats

    def save_active_chats(self):
        self.set("active_chats", self.active_chats)
        self.set("all_pm", self.all_pm)

    @loader.command(ru_doc="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ")
    async def artoggle(self, message):
        chat_id = str(message.chat_id)

        if self.all_pm:
            self.all_pm = False
            await utils.answer(message, self.strings["all_pm_disabled"])
        
        if chat_id in self.active_chats:
            del self.active_chats[chat_id]
            status = False
        else:
            self.active_chats[chat_id] = True
            status = True
            
        self.save_active_chats()
        
        await utils.answer(
            message,
            self.strings["enabled"] if status else self.strings["disabled"]
        )

    @loader.command(ru_doc="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö")
    async def arallpm(self, message):
        """Toggle auto-reactions in all private messages"""
        self.all_pm = not self.all_pm

        if self.all_pm:
            self.active_chats.clear()

        self.save_active_chats()

        await utils.answer(
            message,
            self.strings["all_pm_enabled"] if self.all_pm else self.strings["all_pm_disabled"]
        )

    @loader.command(ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é (–æ–±—ã—á–Ω—ã–π —ç–º–æ–¥–∑–∏ –∏–ª–∏ ID –¥–ª—è Premium)")
    async def setr(self, message):
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_reaction"])
            return

        is_premium = args.isdigit()

        self.config["current_reaction"] = args
        self.config["is_premium"] = is_premium

        await utils.answer(
            message,
            self.strings["premium_set"].format(args) if is_premium else self.strings["reaction_set"].format(args)
        )

    @loader.watcher()
    async def watcher(self, message):
        if not isinstance(message, types.Message):
            return

        chat_id = str(message.chat_id)

        is_private = isinstance(message.peer_id, types.PeerUser)

        should_react = (
            (self.all_pm and is_private) or
            (chat_id in self.active_chats)
        )

        if not should_react:
            return

        try:
            if self.config["is_premium"]:
                await message.react(types.ReactionCustomEmoji(document_id=int(self.config["current_reaction"])))
            else:
                await message.react(self.config["current_reaction"])
        except Exception as e:
            return