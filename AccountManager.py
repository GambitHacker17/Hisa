# meta developer: @MartyyyK

__version__ = (1, 0, 0)

from telethon import functions, types
from telethon.tl.functions.users import GetFullUserRequest
import logging
from .. import loader, utils

logging.basicConfig(level=logging.INFO)

@loader.tds
class AccountManager(loader.Module):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä Telegram –∞–∫–∫–∞—É–Ω–∞"""

    strings = {
        "name": "AccountManager",
        "error": "<emoji document_id=5237814653010076467>‚ùå</emoji> –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è...",
        "bio_success": "<emoji document_id=5229132514060167056>‚úÖ</emoji> <b>–ë–∏–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n<b><emoji document_id=5237814653010076467>‚ùå</emoji> –Ω–æ–≤–æ–µ –±–∏–æ:</b> <code>{}</code>",
        "name_success": "<emoji document_id=5233429444156223307>üîÑ</emoji> <b>–∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n<b><emoji document_id=5237814653010076467>‚ùå</emoji> –Ω–æ–≤–æ–µ –∏–º—è:</b> <code>{}</code>",
        "user_success": "<emoji document_id=5235875883297824772>üë§</emoji> <b>–Æ–∑–µ—Ä–Ω–µ–π–º –∏–∑–º–µ–Ω–µ–Ω!</b>\n<b><emoji document_id=5237814653010076467>‚ùå</emoji> –Ω–æ–≤—ã–π —é–∑–µ—Ä–Ω–µ–π–º:</b> @{}",
        "user_removed": "<emoji document_id=5235875883297824772>üë§</emoji> <b>–Æ–∑–µ—Ä–Ω–µ–π–º —É–¥–∞–ª–µ–Ω!</b>",
        "user_taken": "<emoji document_id=5237814653010076467>‚ùå</emoji> <b>–Æ–∑–µ—Ä–Ω–µ–π–º @{} —É–∂–µ –∑–∞–Ω—è—Ç!</b>",
        "avatar_success": "<emoji document_id=5228764435362900200>üñºÔ∏è</emoji> <b>–≤–∞—à–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>",
        "avatar_error": "<emoji document_id=5237814653010076467>‚ùå</emoji> <b>–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>",
        "privacy_settings": "<emoji document_id=5237814653010076467>‚ùå</emoji> <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:</b>\n\n{}",
        "arg_missing": "<emoji document_id=5237814653010076467>‚ùå</emoji> <b>—É–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>",
        "check_true": "<emoji document_id=5229132514060167056>‚úÖ</emoji> <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{} <b>(–¥–æ—Å—Ç—É–ø–µ–Ω!)</b>",
        "check_false": "<emoji document_id=5235875883297824772>üë§</emoji> <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{} <b>(–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!)</b>",
        "check_false_args": "<emoji document_id=5237814653010076467>‚ùå</emoji> <b>–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–ø–∏—à–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å...</b>",
        "full_profile_info": "<emoji document_id=5237814653010076467>‚ùå</emoji> –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ:",
        "id": "<emoji document_id=5228764435362900200>üñºÔ∏è</emoji> –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: @{}",
        "first_name": "<emoji document_id=5237814653010076467>‚ùå</emoji> –ò–º—è: {}",
        "username": "<emoji document_id=5231112502573555738>üë§</emoji> –Æ–∑–µ—Ä–Ω–µ–π–º: @{}",
        "bio": "<emoji document_id=5233261334841289002>üìù</emoji> –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {}",
        "is_bot": "<emoji document_id=5231188729653127746>ü§ñ</emoji> –ë–æ—Ç-–ê–∫–∫–∞—É–Ω—Ç: {}",
        "verified": "<emoji document_id=5229132514060167056>‚úÖ</emoji> –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ê–∫–∫–∞—É–Ω—Ç: {}",
        "restricted": "<emoji document_id=5235875883297824772>üë§</emoji> –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ: {}",
        "privacy_everybody": "<emoji document_id=5235875883297824772>üë§</emoji> –í—Å–µ",
        "privacy_contacts": "<emoji document_id=5233429444156223307>üîÑ</emoji> –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "privacy_nobody": "<emoji document_id=5237814653010076467>‚ùå</emoji> –ù–∏–∫—Ç–æ"
    }

    async def client_ready(self, client, db):
        self._db = db
        self._client = client


    @loader.command()
    async def setbio(self, message):
        """<–æ–ø–∏—Å–∞–Ω–∏–µ> - –∏–∑–º–µ–Ω–∏—Ç—å –±–∏–æ"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["arg_missing"])
            return

        try:
            await self._client(functions.account.UpdateProfileRequest(about=args))
            await utils.answer(message, self.strings["bio_success"].format(args))
        except Exception:
            await utils.answer(message, self.strings["error"])

    @loader.command()
    async def setname(self, message):
        """<–∏–º—è> - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["arg_missing"])
            return

        try:
            await self._client(functions.account.UpdateProfileRequest(first_name=args))
            await utils.answer(message, self.strings["name_success"].format(args))
        except Exception:
            await utils.answer(message, self.strings["error"])

    @loader.command()
    async def setuser(self, message):
        """<—é–∑–µ—Ä–Ω–µ–π–º> - –∏–∑–º–µ–Ω–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)"""
        args = utils.get_args_raw(message)

        try:
            await self._client(functions.account.UpdateUsernameRequest(username=args or ""))
            if args:
                await utils.answer(message, self.strings["user_success"].format(args))
            else:
                await utils.answer(message, self.strings["user_removed"])
        except Exception as e:
            if "USERNAME_OCCUPIED" in str(e):
                await utils.answer(message, self.strings["user_taken"].format(args))
            else:
                await utils.answer(message, self.strings["error"])

    @loader.command()
    async def setavatar(self, message):
        """<—Ä–µ–ø–ª–∞–π –Ω–∞ —Ñ–æ—Ç–æ> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä"""
        reply = await message.get_reply_message()
        if not reply or not reply.photo:
            await utils.answer(message, self.strings["avatar_error"])
            return

        try:
            file = await reply.download_media(bytes)
            await self._client(functions.photos.UploadProfilePhotoRequest(
                file=await self._client.upload_file(file)))
            await utils.answer(message, self.strings["avatar_success"])
        except Exception:
            await utils.answer(message, self.strings["error"])

    @loader.command()
    async def checkuser(self, message):
        """<—é–∑–µ—Ä–Ω–µ–π–º> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        args = utils.get_args_raw(message)

        if not args:
            await utils.answer(message, self.strings["check_false_args"])
            return

        username = args.strip()

        result = await self.check_username_availability(username)

        if result:
            await utils.answer(message, self.strings["check_false"].format(username))
        else:
            await utils.answer(message, self.strings["check_true"].format(username))

    async def check_username_availability(self, username: str) -> bool:
        try:
            request = functions.account.CheckUsernameRequest(username=username)
            result = await self._client(request)
            return result
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —é–∑–µ—Ä–Ω–µ–π–º–∞ {username}: {e}")
            return False
        
    @loader.command()
    async def profile(self, message):
        """–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        args = utils.get_args_raw(message)
        user_id = None
        if args:
            try:
                user_id = int(args)
            except ValueError:
                await utils.answer(message, "‚ö† ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
        else:
            user_id = message.sender_id
            full_user = await self._client(GetFullUserRequest(id=types.InputUser(user_id=user_id, access_hash=0)))

            user = full_user.users[0]
            profile = full_user.full_user

            text = self.strings["full_profile_info"] + "\n\n"
            text += self.strings["id"].format(user.id) + "\n"
            text += self.strings["first_name"].format(user.first_name) + "\n"
            text += self.strings["username"].format(user.username or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç") + "\n"
            text += self.strings["bio"].format(profile.about or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç") + "\n"
            text += self.strings["is_bot"].format(user.bot or "–ù–µ—Ç") + "\n"
            text += self.strings["verified"].format(user.verified or "–ù–µ—Ç") + "\n"
            text += self.strings["restricted"].format(user.restricted or "–ù–µ—Ç") + "\n"

            await utils.answer(message, text)

    @loader.command()
    async def getprivacy(self, message):
        """–ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
        last_seen = await self._client(functions.account.GetPrivacyRequest(
            key=types.InputPrivacyKeyStatusTimestamp()
        ))
        phone = await self._client(functions.account.GetPrivacyRequest(
            key=types.InputPrivacyKeyPhoneNumber()
        ))
        profile_photo = await self._client(functions.account.GetPrivacyRequest(
            key=types.InputPrivacyKeyProfilePhoto()
        ))
        forwards = await self._client(functions.account.GetPrivacyRequest(
            key=types.InputPrivacyKeyForwards()
        ))
        groups = await self._client(functions.account.GetPrivacyRequest(
            key=types.InputPrivacyKeyChatInvite()
        ))
        call = await self._client(functions.account.GetPrivacyRequest(
            key=types.InputPrivacyKeyPhoneCall()
        ))
        voice = await self._client(functions.account.GetPrivacyRequest(
            key=types.InputPrivacyKeyVoiceMessages()
        ))
        time_account_ttl = await self._client(functions.account.GetAccountTTLRequest(
        ))

        global_settings = await self._client(functions.account.GetGlobalPrivacySettingsRequest())
        
        privacy_info = (
            f"<emoji document_id=5231112502573555738>üë§</emoji> <b>–≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è:</b> {self._format_privacy(last_seen.rules)}",
            f"<emoji document_id=5231112502573555738>üë§</emoji> <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {self._format_privacy(phone.rules)}",
            f"<emoji document_id=5231112502573555738>üë§</emoji> <b>—Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:</b> {self._format_privacy(profile_photo.rules)}",
            f"<emoji document_id=5231112502573555738>üë§</emoji> <b>–ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {self._format_privacy(forwards.rules)}",
            f"<emoji document_id=5231112502573555738>üë§</emoji> <b>–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã:</b> {self._format_privacy(groups.rules)}",
            f"<emoji document_id=5231112502573555738>üë§</emoji> <b>–∫–ª—è–∂–∫–∏/–≥–æ–ª–æ—Å–æ–≤—ã–µ:</b> {self._format_privacy(voice.rules)}",
            f"<emoji document_id=5231112502573555738>üë§</emoji> <b>–∑–≤–æ–Ω–∫–∏:</b> {self._format_privacy(call.rules)}",
            f"<emoji document_id=5231112502573555738>üë§</emoji> <b>—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {time_account_ttl.days} –î–Ω–µ–π\n"
            f"<emoji document_id=5231112502573555738>üë§</emoji> <b>–∞—Ä—Ö–∏–≤ –∏ –Ω–æ–≤—ã–µ —á–∞—Ç—ã:</b> {'<emoji document_id=5237814653010076467>‚ùå</emoji> –°–∫—Ä—ã—Ç–æ' if global_settings.archive_and_mute_new_noncontact_peers else '<emoji document_id=5229132514060167056>‚úÖ</emoji> –ù–µ —Å–∫—Ä—ã—Ç–æ'}"
        )

        await utils.answer(
            message,
            self.strings["privacy_settings"].format("\n".join(privacy_info))
            )    

    def _format_privacy(self, rules):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
        if any(isinstance(rule, types.PrivacyValueAllowAll) for rule in rules):
            return "<emoji document_id=5235875883297824772>üë§</emoji> –í—Å–µ"
        elif any(isinstance(rule, types.PrivacyValueAllowContacts) for rule in rules):
            return "<emoji document_id=5233429444156223307>üîÑ</emoji> –ö–æ–Ω—Ç–∞–∫—Ç—ã"
        elif any(isinstance(rule, types.PrivacyValueDisallowContacts) for rule in rules):
            return "<emoji document_id=5229132514060167056>‚úÖ</emoji> –ë–ª–∏–∑–∫–∏–µ –¥—Ä—É–∑—å—è"
        else:
            return "<emoji document_id=5237814653010076467>‚ùå</emoji> –ù–∏–∫—Ç–æ"