import json 
from html import escape
import aiohttp 
from ..import loader ,utils 
from telethon import events 
import requests 
from telethon import events 
from ..import loader ,utils 
import re 
from time import sleep 
from bs4 import BeautifulSoup 
import base64 
from telethon .tl .custom import Message 

available_models ={
"1":"o3-mini",
"2":"o1-preview",
"3":"o1-Mini",
"4":"gpt-4o",
"5":"gpt-4o-mini",
"6":"gpt4-turbo",
"7":"gpt-3.5-turbo",
"8":"gpt-4",
"9":"deepseek-v3",
"10":"deepseek-r1",
"11":"gemini",
"12":"gemini-1.5 Pro",
"13":"gemini-flash",
"14":"llama-3.1",
"15":"llama-2",
"16":"claude-3-haiku",
"17":"claude-3.5-sonnet",
"18":"bard",
"19":"qwen",
"20":"t-pro",
"21":"t-lite"
}

available_image_models = {
    "1": "sdxl-turbo",
    "2": "sd-3.5",
    "3": "flux",
    "4": "flux-pro",
    "5": "flux-dev",
    "6": "flux-schnell",
    "7": "dall-e-3",
    "8": "midjourney"
}

PERSONAS_FILE ="personas.json"

def load_personas ():
    try :
        with open (PERSONAS_FILE ,"r",encoding ="utf-8")as f :
            return json .load (f )
    except FileNotFoundError :
        return {}

def save_personas (personas ):
    with open (PERSONAS_FILE ,"w",encoding ="utf-8")as f :
        json .dump (personas ,f ,indent =4 )

personas =load_personas ()

@loader .tds 
class AIModule (loader .Module ):
    """
üß† –ú–æ–¥—É–ª—å ZettaAI

–î–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ 21 –º–æ–¥–µ–ª–∏ –ò–ò

üîÄ–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:

–û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å:
.ai <–∑–∞–ø—Ä–æ—Å> - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞.  

–ß–∞—Ç:
.chat - –≤–µ–¥–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –ò–ò, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã.  

–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤:
–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –≤—ã–ø–æ–ª–Ω—è—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∏ –∏—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ *.switchplugin.*

–†–∞–±–æ—Ç–∞ —Å Hisa Userbot:
–ö–æ–º–∞–Ω–¥—ã aicreate, aierror –º–æ–≥—É—Ç –∑–∞–º–µ–Ω–∏—Ç—å –≤–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Hisa –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–¥—É–ª—å.  

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 21 –º–æ–¥–µ–ª–∏ –ò–ò.  
- –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram.  
    """
    strings ={"name":"Zetta"}

    def __init__ (self ):
        super ().__init__ ()
        self .default_model ="gpt-4o-mini"
        self.default_image_model = "flux"
        self .active_chats ={}
        self .chat_history ={}
        self .chat_archive ={}
        self .role ={}
        self .response_mode ={}
        self .edit_promt ="off"
        self .instructions =self .get_instructions ()
        self .error_instructions =self .get_error_instructions ()
        self .module_instructions =self .get_module_instruction ()
        self .module_instruction2 =self .get_module_instruction2 ()
        self .module_instruction3 =self .get_module_instruction3 ()
        self .metod ="on"
        self .provider ='zetta'
        self .api_key ="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        self .handle_voice_message =self .handle_voice_message ()
        self .humanmode ='off'

    @loader .unrestricted 
    async def aierrorcmd (self ,message ):
        """
        –°–ø—Ä–æ—Å–∏—Ç—å —É AI –ø–æ–º–æ—â–Ω–∏–∫–∞  –¥–ª—è Hisa –æ–± –æ—à–∏–±–∫–µ –º–æ–¥—É–ª—è.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.aierror <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `.aierror`
        """
        r ="error"
        await self .process_request (message ,self .error_instructions ,r )

    def get_instructions (self ):
        url ='https://raw.githubusercontent.com/GambitHacker17/Hisa/Modules/Zetta/data_set.txt'
        response =requests .get (url )
        return response .text 

    def get_error_instructions (self ):
        url ='https://raw.githubusercontent.com/GambitHacker17/Hisa/Modules/Zetta/error_set.txt'
        response =requests .get (url )
        return response .text 

    def get_module_instruction (self ):
        url ='https://raw.githubusercontent.com/GambitHacker17/Hisa/Modules/Zetta/module_set.txt'
        response =requests .get (url )
        return response .text

    def get_module_instruction2 (self ):
        url ='https://raw.githubusercontent.com/GambitHacker17/Hisa/Modules/Zetta/module_set2.txt'
        response =requests .get (url )
        return response .text 

    def get_module_instruction3 (self ):
        url ='https://raw.githubusercontent.com/GambitHacker17/Hisa/Modules/Zetta/module_set3.txt'
        response =requests .get (url )
        return response .text 

    async def client_ready (self ,client ,db ):
        self .client =client 
        self .db =db 
        self .active_chats =self .db .get ("AIModule","active_chats",{})
        self .chat_history =self .db .get ("AIModule","chat_history",{})
        self .chat_archive =self .db .get ("AIModule","chat_archive",{})
        self .role =self .db .get ("AIModule","role",{})
        self .response_mode =self .db .get ("AIModule","response_mode",{})

    async def handle_voice_message (message :Message ):
        try :

            file_path =await client .download_media (message .voice )

            audio =AudioSegment .from_ogg (file_path )
            audio_path ="temp_audio.wav"
            audio .export (audio_path ,format ="wav")

            voice =await message .edit ("–°–ª—É—à–∞—é...üéô")
            recognized_text =recognize_audio (audio_path )

            if recognized_text :
                request_text =recognized_text 
                return request_text 
            else :
                await message .edit ("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

            os .remove (audio_path )
        except Exception as e :
            await message .reply (f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e }")

    def _create_zettacfg_buttons (self ):
        buttons =[]
        buttons .append ([{"text":"Super promt","callback":self ._zettacfg ,"args":("superpromt",)}])
        buttons .append ([{"text":"Human mode","callback":self ._zettacfg ,"args":("humanmode",)}])
        buttons .append ([{"text":"Ultra mode","callback":self ._zettacfg ,"args":("ultramode",)}])
        buttons .append ([{"text":"API provider","callback":self ._zettacfg ,"args":("apiswitch",)}])
        return buttons 

    @loader .unrestricted 
    async def zettacfgcmd (self ,message ):
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è

        """
        await self .inline .form (
        text ="üîß<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>",
        message =message ,
        reply_markup =self ._create_zettacfg_buttons ()
        )

    async def _zettacfg (self ,call ,setting ):
        from telethon import Button 

        if setting =="superpromt":
            text =(
            "<b>üí´ –£–ª—É—á—à–∞–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é –ò–ò –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –µ–≥–æ –º–æ–¥–µ–ª–∏ –ò–ò.</b>"
            )
            current =self .edit_promt if hasattr (self ,"edit_promt")else "off"
        elif setting =="humanmode":
            text =(
            "<b>üí¨ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ '–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ ...' –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞.</b>"
            )
            current = self.humanmode if hasattr(self, "humanmode") else "off"
        elif setting == "ultramode":
            text = (
                "üìö <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π. –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è.</b>"
            )
            current =self .metod if hasattr (self ,"metod")else "off"
        elif setting =="apiswitch":
            text =(
            "<b>üîÑ –ü—Ä–æ–≤–∞–π–¥–µ—Ä API –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤.\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: Zetta AI</b>"
            )
            current =self .provider if hasattr (self ,"provider")else "zetta"
        else :
            text ="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞."
            current ="off"

        if setting in ("superpromt","humanmode","ultramode"):
            btn_on ="–í–∫–ª"+("üü£"if current =="on"else "")
            btn_off ="–í—ã–∫–ª"+("üü£"if current =="off"else "")
        elif setting =="apiswitch":
            btn_on ="Zetta AI"+("üü£"if current =="Zetta AI"else "")
            btn_off ="Devj"+("üü£"if current =="Devj"else "")

        buttons =[
        [{"text":btn_on ,"callback":self ._zettaset ,"args":(setting ,btn_on .split ("üü£")[0 ]if "üü£"in btn_on else btn_on )}],
        [{"text":btn_off ,"callback":self ._zettaset ,"args":(setting ,btn_off .split ("üü£")[0 ]if "üü£"in btn_off else btn_off )}],
        [{"text":"‚¨ÖÔ∏è–ù–∞–∑–∞–¥","callback":self ._back_zettacfg }]
        ]
        await call .edit (text ,reply_markup =buttons )

    async def _zettaset (self ,call ,setting ,value ):
        if setting =="superpromt":
            self .edit_promt =value 
        elif setting =="humanmode":
            self .humanmode =value 
        elif setting =="ultramode":
            self .metod =value 
        elif setting =="apiswitch":
            self .provider =value 

        await self ._zettacfg (call ,setting )

    async def _back_zettacfg (self ,call ):
        await call .edit ("üîß<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>",reply_markup =self ._create_zettacfg_buttons ())

    @loader .unrestricted 
    async def modelcmd (self ,message ):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –ò–ò –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.model <–Ω–æ–º–µ—Ä>` –∏–ª–∏ `.model list` –¥–ª—è —Å–ø–∏—Å–∫–∞.
        """
        args =utils .get_args_raw (message )
        if not args :
            await message .edit ("ü§î <b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ –∏–ª–∏ list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞.</b>")
            return 

        if args =="list":
            model_list ="\n".join ([f"<b>{k }.</b> {v }"for k ,v in available_models .items ()])
            await message .edit (f"üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\n{model_list }")
            return 

        if args not in available_models :
            await message .edit ("üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏.</b>")
            return 

        self .default_model =available_models [args ]
        await message .edit (f"‚úÖ <b>–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:</b> {self .default_model }")

    @loader .unrestricted 
    async def chatcmd (self ,message ):
        """
        –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —á–∞—Ç–∞.
        """
        chat_id =str (message .chat_id )
        if self .active_chats .get (chat_id ):
            self .active_chats .pop (chat_id ,None )
            self .db .set ("AIModule","active_chats",self .active_chats )

            if chat_id in self .chat_history :
                self .chat_archive [chat_id ]=self .chat_history [chat_id ]
                self .chat_history .pop (chat_id ,None )
                self .db .set ("AIModule","chat_history",self .chat_history )
                self .db .set ("AIModule","chat_archive",self .chat_archive )
                await message .edit ("üì¥ <b>–†–µ–∂–∏–º —á–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω. –ò—Å—Ç–æ—Ä–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.</b>")
            else :
                await message .edit ("üì¥ <b>–†–µ–∂–∏–º —á–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω.</b>")
        else :
            self .active_chats [chat_id ]=True 
            self .db .set ("AIModule","active_chats",self .active_chats )

            if chat_id in self .chat_archive :
                self .chat_history [chat_id ]=self .chat_archive [chat_id ]
                self .chat_archive .pop (chat_id ,None )
                self .db .set ("AIModule","chat_history",self .chat_history )
                self .db .set ("AIModule","chat_archive",self .chat_archive )
                await message .edit ("üí¨ <b>–†–µ–∂–∏–º —á–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω. –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞.</b>")
            else :
                await message .edit ("üí¨ <b>–†–µ–∂–∏–º —á–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω.</b>")

    async def send_request_to_api (self ,message ,instructions ,request_text ,model ="gpt-4o-mini"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
        api_url ="http://109.172.94.236:5001/Zetta/v1/models"if self .provider =="zetta"else "https://api.vysssotsky.ru/"

        if self .provider =='devj':
            payload ={
            "model":"gpt-4",
            "messages":[{"role":"user","content":f"{instructions }\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request_text }"}],
            "max_tokens":10048 ,
            "temperature":0.7 ,
            "top_p":1 ,
            }

            try :
                async with aiohttp .ClientSession ()as session :
                    async with session .post (f"https://api.vysssotsky.ru/v1/chat/completions",
                    headers ={"Authorization":f"Bearer {self .api_key }","Content-Type":"application/json"},
                    data =json .dumps (payload ))as response :
                        if response .status ==200 :
                            data =await response .json ()
                            answer =data .get ("choices",[{}])[0 ].get ("message",{}).get ("content","–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
                            answer =f"<blockquote>{answer }</blockquote>"
                            return answer 
                        else :
                            await message .edit ("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API.")
            except Exception as e :
                await message .edit (f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e }")

        else :
            api_url ="http://109.172.94.236:5001/Zetta/v1/models"
            payload ={
            "model":self .default_model ,
            "request":{
            "messages":[
            {
            "role":"user",
            "content":f"{instructions }\n–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. –¢–∞–∫–∂–µ –ø–æ–º–Ω–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —á–∞—Å—Ç–∏ –º–æ–¥—É–ª—è, –µ—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞. –ò –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –¥–∞–ª—å—à–µ.\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request_text }"
            }
            ]
            }
            }

            try :
                async with aiohttp .ClientSession ()as session :
                    async with session .post (api_url ,json =payload )as response :

                        response .raise_for_status ()
                        data =await response .json ()

                        answer =data .get ("answer","üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.").strip ()
                        decoded_answer =base64 .b64decode (answer ).decode ('utf-8')
                        answer = decoded_answer
                        return answer 

            except aiohttp .ClientError as e :
                await message .edit (f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e }\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –º–æ–¥—É–ª—è.")
                return None 

    async def modulecreating (self ,answer ,message ,request_text ):
        rewrite =self .get_module_instruction2 ()
        await message .edit ("<b>üé≠–°–æ–∑–¥–∞–µ—Ç—Å—è –º–æ–¥—É–ª—å:\nüü¢–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞\nüí≠–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...</b>\n\n–ó–∞–º–µ—Ç–∫–∞: —á–µ–º –ª—É—á—à–µ –≤—ã —Ä–∞—Å–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –º–æ–¥–µ–ª–∏ - —Ç–µ–º –ª—É—á—à–µ –æ–Ω–∞ —Å–æ–∑–¥–∞—Å—Ç –º–æ–¥—É–ª—å. ")
        answer =await self .send_request_to_api (message ,rewrite ,f"User request: {request_text }\nAnswer to the first part of the module:{answer }")
        if answer :
            await self .modulecreating2 (answer ,message ,request_text )

    async def modulecreating2 (self ,answer ,message ,request_text ):
        rewrite =self .get_module_instruction3 ()
        await message .edit ("<b>üé≠–°–æ–∑–¥–∞–µ—Ç—Å—è –º–æ–¥—É–ª—å:\nüü¢–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞\nüü¢–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ\nüí≠–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç—å –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...</b>\n\n–ï—â–µ –∑–∞–º–µ—Ç–∫–∞: –õ—É—á—à–µ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å.")
        answer =await self .send_request_to_api (message ,rewrite ,f"User request: {request_text }\nAnswer to the first part of the module:{answer }")
        if answer :
            try :
                if len (answer )>4096 :
                    await message .edit ("‚ö†Ô∏è –ö–æ–¥ –º–æ–¥—É–ª—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ë—ã–ª –≤—ã—Å–ª–∞–Ω –ø—Ä–æ—Å—Ç–æ —Ñ–∞–π–ª.")
                    await self .save_and_send_code (answer ,message )
                else :
                    await message .edit (f"<b>üí° –û—Ç–≤–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ Hisa | –ö—Ä–µ–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π</b>:\n{answer }")
                    await self .save_and_send_code (answer ,message )
            except Exception as e :
                if "Message was too long"in str (e ):
                    await message .edit ("‚ö†Ô∏è –ö–æ–¥ –º–æ–¥—É–ª—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
                    await self .save_and_send_code (answer ,message )
                else :
                    await message .edit (f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e }")

    @loader.unrestricted
    async def zimgcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .zimg <–∑–∞–ø—Ä–æ—Å>"""
        import os
    
        args = utils.get_args_raw(message)
    
        if not args:
            await message.edit("ü§î <b>–£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.</b>")
            return
    
        if args == "list":
            model_list = "\n".join([f"<b>{k}.</b> {v}" for k, v in available_image_models.items()])
            await message.edit(f"üñº <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\n{model_list}")
            return
    
        model = self.default_image_model
        prompt_parts = args.split(" ", 1)
    
        if len(prompt_parts) > 1 and prompt_parts[0] in available_image_models:
            model = available_image_models[prompt_parts[0]]
            prompt = prompt_parts[1]
        else:
            prompt = args

        try:
            await message.edit("<blockquote><b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</b></blockquote>")

            payload = {
                "model": model,
                "prompt": prompt,
                "response_format": "url"
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "https://api.kshteam.top/v1/images/generate",
                    headers={
                        "Authorization": f"Bearer {self.api_key}",
                        "Content-Type": "application/json"
                    },
                    json=payload
                ) as response:
                    if response.status != 200:
                        await utils.answer(message, f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status}</b>")
                        return

                    data = await response.json()
                    image_url = data.get("data", [{}])[0].get("url")

                    if not image_url:
                        await utils.answer(message, "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>")
                        return

                    async with session.get(image_url) as generated_image:
                        file_name = "ai_image.png"
                        try:
                            with open(file_name, 'wb') as file:
                                file.write(await generated_image.read())

                            await message.client.send_file(
                                message.chat_id,
                                file_name,
                                caption=f"<blockquote>üí≠ <b>–ó–∞–ø—Ä–æ—Å:</b> <code>{prompt}</code></blockquote>\n\n<blockquote>üí° <b>–ú–æ–¥–µ–ª—å:</b> <code>{model}</code></blockquote>",
                                reply_to=message.id if message.out else None
                            )
                            await message.delete()
                        finally:
                            if os.path.exists(file_name):
                                os.remove(file_name)

        except Exception as e:
            await utils.answer(message, f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞: {e}</b>")

    @loader.unrestricted
    async def imgmodelcmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .imgmodel [–Ω–æ–º–µ—Ä/–Ω–∞–∑–≤–∞–Ω–∏–µ]"""
        args = utils.get_args_raw(message)
        
        if not args:
            current = f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {self.default_image_model}"
            model_list = "\n".join([f"<b>{k}.</b> {v}" for k, v in available_image_models.items()])
            await message.edit(f"üé® <b>{current}</b>\n\nüñº <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\n{model_list}")
            return
        
        if args in available_image_models:
            self.default_image_model = available_image_models[args]
            await message.edit(f"‚úÖ <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å:</b> {self.default_image_model}")
        elif args in available_image_models.values():
            self.default_image_model = args
            await message.edit(f"‚úÖ <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å:</b> {self.default_image_model}")
        else:
            await message.edit("‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .zimg list</b>")

    @loader.unrestricted
    async def modelcmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –ò–ò\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .model [–Ω–æ–º–µ—Ä]"""
        args = utils.get_args_raw(message)
        if not args:
            model_list = "\n".join([f"<b>{k}.</b> {v}" for k, v in available_models.items()])
            await message.edit(f"ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\n{model_list}")
            return

        if args not in available_models:
            await message.edit("‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏</b>")
            return

        self.default_model = available_models[args]
        await message.edit(f"‚úÖ <b>–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:</b> {self.default_model}")

    @loader.unrestricted
    async def aicmd(self, message):
        """–ó–∞–ø—Ä–æ—Å –∫ –ò–ò\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .ai <–∑–∞–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)

        if reply and args:
            request_text = f'"{reply.raw_text}"\n\n{args}'
        elif reply:
            request_text = reply.raw_text
        elif args:
            request_text = args
        else:
            await message.edit("ü§î <b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>")
            return

        await message.edit("<b>ü§î –î—É–º–∞—é...</b>")
        answer = await self.send_short_request_to_api(message, request_text)
        if answer:
            await message.edit(f"üí° <b>–û—Ç–≤–µ—Ç {self.default_model}:</b>\n{answer}")

    @loader .unrestricted 
    async def aicreatecmd (self ,message ):
        """
        –ü–æ–ø—Ä–æ—Å–∏—Ç—å AI –ø–æ–º–æ—â–Ω–∏–∫–∞  –¥–ª—è  Hisa –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–¥—É–ª—å.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.aicreate <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `.aicreate` """
        r ="create"
        await self .process_request (message ,self .module_instructions ,r )

    async def save_and_send_code (self ,answer ,message ):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥ –≤ —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∏ —É–¥–∞–ª—è–µ—Ç."""
        try :
            code_start =answer .find ("`python")+len ("`python")
            code_end =answer .find ("```",code_start )
            code =answer [code_start :code_end ].strip ()

            with open ("AI-module.py","w")as f :
                f .write (code )

            await message .client .send_file (
            message .chat_id ,
            "AI-module.py",
            caption ="<b>üí´–í–∞—à –≥–æ—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å</b>",
            )

            os .remove ("AI-module.py")

        except (TypeError ,IndexError )as e :
            await message .reply (f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–¥–∞: {e }")
        except Exception as e :
            await message .reply (f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞: {e }")

    async def process_request (self ,message ,instructions ,command ):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –º–æ–¥–µ–ª–∏ –ò–ò.
        """
        if message .voice :
            request_text =await self .handle_voice_message (message )
        else :

            reply =await message .get_reply_message ()
            args =utils .get_args_raw (message )

            if reply :
                request_text =reply .raw_text 
            elif args :
                request_text =args 
            else :
                await message .edit ("ü§î –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return 

        try :
            await message .edit ("<b>ü§î –î—É–º–∞—é...</b>")
            answer =await self .send_request_to_api (message ,instructions ,request_text )
            if answer :
                if command =="error":
                    formatted_answer =f"üí°<b> –û—Ç–≤–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ Hisa</b>:\n{answer }"
                    await message .edit (formatted_answer )
                elif command =="create":
                    await self .modulecreating (answer ,message ,request_text )
                else :
                    formatted_answer =answer 
                    await message .edit (formatted_answer )

        except Exception as e :
            await message .edit (f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e }")

    @loader .unrestricted 
    async def clearcmd (self ,message ):
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ –ò–ò
        """
        chat_id =str (message .chat_id )
        if chat_id in self .chat_history or chat_id in self .chat_archive :
            self .chat_history .pop (chat_id ,None )
            self .chat_archive .pop (chat_id ,None )
            self .db .set ("AIModule","chat_history",self .chat_history )
            self .db .set ("AIModule","chat_archive",self .chat_archive )
            await message .edit ("üóëÔ∏è <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.</b>")
        else :
            await message .edit ("üì≠Ô∏è <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞.</b>")

    @loader .unrestricted 
    async def rolecmd (self ,message ):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å –¥–ª—è –ò–ò –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.role <—Ä–æ–ª—å>`
        """
        chat_id =str (message .chat_id )
        args =utils .get_args_raw (message )
        if not args :
            await message .edit ("üé≠ <b>–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ò–ò.</b>")
            return 

        self .role [chat_id ]=args 
        self .db .set ("AIModule","role",self .role )
        await message .edit (f"üé≠ <b>–†–æ–ª—å –ò–ò —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:</b> {args }")

    @loader .unrestricted 
    async def modecmd (self ,message ):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –ò–ò.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.mode <reply/all>`
        """
        chat_id =str (message .chat_id )
        args =utils .get_args_raw (message )
        if not args or args not in ("reply","all"):
            await message .edit ("ü§î <b>–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞: reply –∏–ª–∏ all.</b>")
            return 

        self .response_mode [chat_id ]=args 
        self .db .set ("AIModule","response_mode",self .response_mode )
        await message .edit (f"‚úÖ <b>–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:</b> {args }")

    @loader .unrestricted 
    async def createplugincmd (self ,message ):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞–≥–∏–Ω.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.createplugin <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è>`
        """
        args =utils .get_args_raw (message )
        if not args :
            await message .edit ("ü§î <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞.</b>")
            return 

        try :
            name ,role =args .split (" ",1 )
        except ValueError :
            await message .edit ("ü§î <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .createplugin <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è></b>")
            return 

        if 'global'not in personas :
            personas ['global']={}
        personas ['global'][name ]=role 
        save_personas (personas )
        await message .edit (f"‚úÖ <b>–ü–ª–∞–≥–∏–Ω ' {name } ' —Å–æ–∑–¥–∞–Ω.</b>")

    @loader .unrestricted 
    async def pluginscmd (self ,message ):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤.
        """
        if 'global'not in personas or not personas ['global']:
            await message .edit ("ü§î <b>–°–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤ –ø—É—Å—Ç.</b>")
            return 

        persona_list ="\n".join ([f"<b>{name }:</b> {role }"for name ,role in personas ['global'].items ()])
        await message .edit (f"üß© <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:</b>\n{persona_list }\n\n–ê –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ–ª—å—à–µ, –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ç–æ–∂–µ)")

    @loader .unrestricted 
    async def switchplugincmd (self ,message ):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.switchplugin <–Ω–∞–∑–≤–∞–Ω–∏–µ>`
        """
        args =utils .get_args_raw (message )
        if not args :
            await message .edit ("ü§î <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞.</b>")
            return 

        if 'global'not in personas or args not in personas ['global']:
            await message .edit ("üö´ <b>–ü–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
            return 

        chat_id =str (message .chat_id )
        self .role [chat_id ]=personas ['global'][args ]
        await message .edit (f"‚úÖ <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø–ª–∞–≥–∏–Ω:</b> {args }")

    @loader .unrestricted 
    async def deleteplugincmd (self ,message ):
        """
        –£–¥–∞–ª—è–µ—Ç –ø–ª–∞–≥–∏–Ω.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.deleteplugin <–ù–∞–∑–≤–∞–Ω–∏–µ>`
        """
        args =utils .get_args_raw (message )
        if not args :
            await message .edit ("ü§î <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞.</b>")
            return 

        if 'global'not in personas or args not in personas ['global']:
            await message .edit ("üö´ <b>–ü–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
            return 

        del personas ['global'][args ]
        save_personas (personas )
        await message .edit (f"‚úÖ <b>–ü–ª–∞–≥–∏–Ω ' {args } ' —É–¥–∞–ª–µ–Ω.</b>")

    @loader .unrestricted 
    async def aicmd (self ,message ):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ò–ò.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.ai <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `.ai`
        """
        reply =await message .get_reply_message ()
        args =utils .get_args_raw (message )

        if reply and args :
            request_text =f'"{reply .raw_text }"\n\n{args }'
        elif reply :
            request_text =reply .raw_text 
        elif args :
            request_text =args 
        else :
            await message .edit ("ü§î <b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>")
            return 

        await self .standart_process_request (message ,request_text )

    async def t9_promt (self ,message ,request_text ,history =None ):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –Ω–æ–≤–æ–º—É API –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
        """
        api_url ="http://109.172.94.236:5001/Zetta/v1/models"
        chat_id =str (message .chat_id )

        payload ={
        "model":self .default_model ,
        "request":{
        "messages":[
        {
        "role":"system",
        "content":(
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –£–ª—É—á—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –º–æ–¥–µ–ª—å –µ–≥–æ –ª—É—á—à–µ –ø–æ–Ω—è–ª–∞, "
        "–æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –∏ –¥–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
        "–ï—Å–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω—è—è –µ–≥–æ. "
        "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ã —Ç–µ–±–µ, —Ç—ã –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫. –í—ã–ø–æ–ª–Ω—è–π —Å–≤–æ—é –∑–∞–¥–∞—á—É."
        )
        },
        {
        "role":"user",
        "content":f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request_text }"
        }
        ]
        }
        }

        if history :
            payload ["request"]["messages"]=history +payload ["request"]["messages"]

        try :
            await message .edit ('<b>–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞...</b>')

            async with aiohttp .ClientSession ()as session :
                async with session .post (api_url ,json =payload )as response :
                    response .raise_for_status ()

                    data =await response .json ()

                    improved_request =data .get ("answer","–ó–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –û—à–∏–±–∫–∞.").strip ()
                    decoded_answer =base64 .b64decode (improved_request ).decode ('utf-8')
                    improved_request =decoded_answer 
                    return improved_request 

        except aiohttp .ClientError as e :
            logging .error (f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e }")
            await message .reply (f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:</b> {e }\n\nüí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –º–æ–¥—É–ª—è.</b>")

    @loader .unrestricted 
    async def aiprovcmd (self ,message ):
        """
        - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—ÖüîÜ
        """
        await message .edit ('''<b>üü£Zetta AI: –°—Ç–∞–±–∏–ª—å–Ω—ã–π, –±—ã—Å—Ç—Ä–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π. –¢–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è. –ë–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ OnlySq –∏ —Ö–æ—Å—Ç–∏—Ç—Å—è –Ω–∞ –∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö.

üî∏devj: –ë—ã—Å—Ç—Ä–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞, –ù–µ —Å—Ç–∞–±–∏–ª–µ–Ω –∏–∑ –∑–∞ —Ä–∞–∑–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.</b>''')

    async def standart_process_request(self, message, request_text):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –º–æ–¥–µ–ª–∏ –ò–ò –¥–ª—è .aicmd.
        """
        api_url = "http://109.172.94.236:5001/Zetta/v1/models"
        chat_id = str(message.chat_id)
        current_role = self.role.get(chat_id, ".")

        format_instructions = (
            "1. –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–±–µ—Ä–∏ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (LaTeX, markdown, HTML)\n"
            "2. –í –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞: —Å—Ç–µ–ø–µ–Ω—å —á–∏—Å–ª–∞, ‚à´, ‚àö –∏ —Ç.–¥.\n"
            "3. –ü–∏—Å–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ —á—Ç–æ —Ç—ã –ø–æ–Ω—è–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ –Ω—É–∂–Ω–æ. –í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ –æ–±—ã—á–Ω–æ. –ó–∞–ø–æ–º–Ω–∏ —á—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ —Å–æ–æ–±—â–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ —á—Ç–æ —Ç—ã –ø–æ–Ω—è–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø—Ä–æ—Å—Ç–æ–∞–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ –æ–±—ã—á–Ω–æ."
        )

        if self.edit_promt == "on":
            request_text = await self.t9_promt(message, request_text)
            responce = f"{request_text}\n\n{format_instructions}"
        else:
            responce = f"{request_text}\n\n{format_instructions}"

        payload = {
            "model": self.default_model,
            "request": {
                "messages": [
                    {"role": "system", "content": current_role},
                    {"role": "user", "content": responce}
                ]
            }
        }

        try:
            await message.edit("<blockquote><b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</b></blockquote>")
            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload) as response:
                    response.raise_for_status()

                    data = await response.json()
                    answer = data.get("answer", "üö´ <b>–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.</b>").strip()
                    try:
                        decoded_bytes = base64.b64decode(answer)
                        decoded_answer = decoded_bytes.decode('utf-8')
                        answer = decoded_answer
                    except (base64.binascii.Error, UnicodeDecodeError) as decode_error:
                        pass

                    if self.edit_promt == "on":
                        formatted_answer = (
                            f"‚ùî <b>–£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é –ò–ò:</b>\n"
                            f"<blockquote>{escape(request_text)}</blockquote>\n\n"
                            f"üí° <b>–û—Ç–≤–µ—Ç {self.default_model}:</b>\n"
                            f"<blockquote>{escape(answer)}</blockquote>"
                        )
                    else:
                        formatted_answer = (
                            f"‚ùî <b>–ó–∞–ø—Ä–æ—Å:</b>\n"
                            f"<blockquote>{escape(request_text)}</blockquote>\n\n"
                            f"üí° <b>–û—Ç–≤–µ—Ç {self.default_model}:</b>\n"
                            f"<blockquote>{escape(answer)}</blockquote>"
                        )
                    await message.edit(formatted_answer)

        except aiohttp.ClientError as e:
            await message.edit(
                f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:</b> {e}\n\n"
                f"üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –º–æ–¥—É–ª—è.</b>"
            )
        except Exception as e:
            await message.edit(f"‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:</b> {e}")

    @loader .unrestricted 
    async def watcher (self ,message ):
        """
        –°–ª–µ–¥–∏—Ç –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º —á–∞—Ç–∞.
        """
        try:
            chat_id =str (message .chat_id )
            if self .active_chats .get (chat_id ):
                if self .response_mode .get (chat_id ,"all")=="reply"and not (message .is_reply and await self .is_reply_to_bot (message )):
                    return

                if message.text and (message.text.startswith('.chat')):
                    return

                if message .voice :
                    request_text =await self .handle_voice_message (message )
                    user_name =await self .get_user_name (message )
                    await self .respond_to_message (message ,user_name ,request_text )
                elif message .text :
                    request_text =message .text .strip ()
                    user_name =await self .get_user_name (message )
                    await self .respond_to_message (message ,user_name ,request_text )
        except Exception as e:
            return

    async def is_reply_to_bot (self ,message ):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞.
        """
        if message .is_reply :
            reply_to_message =await message .get_reply_message ()
            if reply_to_message and reply_to_message .sender_id ==(await self .client .get_me ()).id :
                return True 
        return False 

    async def get_user_name (self ,message ):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        if message .sender :
            user =await self .client .get_entity (message .sender_id )
            return user .first_name or user .username 
        else :
            return "–ê–Ω–æ–Ω–∏–º"

    async def respond_to_message(self, message, user_name, question):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏.
        """
        chat_id = str(message.chat_id)

        format_instructions = (
            "1. –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–±–µ—Ä–∏ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (LaTeX, markdown, HTML)\n"
            "2. –í –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞: —Å—Ç–µ–ø–µ–Ω—å —á–∏—Å–ª–∞, ‚à´, ‚àö –∏ —Ç.–¥.\n"
            "3. –ü–∏—Å–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ —á—Ç–æ —Ç—ã –ø–æ–Ω—è–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ –Ω—É–∂–Ω–æ. –í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ –æ–±—ã—á–Ω–æ. –ó–∞–ø–æ–º–Ω–∏ —á—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ —Å–æ–æ–±—â–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ —á—Ç–æ —Ç—ã –ø–æ–Ω—è–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø—Ä–æ—Å—Ç–æ–∞–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ –æ–±—ã—á–Ω–æ."
        )

        if chat_id not in self.chat_history:
            self.chat_history[chat_id] = []

        self.chat_history[chat_id].append({
            "role": "user",
            "content": f"{user_name} –Ω–∞–ø–∏—Å–∞–ª: {question}\n\n{format_instructions}"
        })

        if len(self.chat_history[chat_id]) > 1000:
            self.chat_history[chat_id] = self.chat_history[chat_id][-1000:]

        if self.edit_promt == "on":
            request_text = await self.t9_promt(message, question, self.chat_history[chat_id])
            question = request_text

        payload = {
            "model": self.default_model,
            "request": {
                "messages": [
                    {
                        "role": "system", 
                        "content": f"{self.role.get(chat_id, '')}\n\n{format_instructions}"
                    }
                ] + self.chat_history[chat_id]
            }
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post("http://109.172.94.236:5001/Zetta/v1/models", json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    answer = data.get("answer", "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.").strip()

                    try:
                        decoded_answer = base64.b64decode(answer).decode('utf-8')
                        answer = decoded_answer
                    except:
                        pass
                
                
                    answer = answer.replace('\[', '').replace('\]', '')
                    answer = answer.replace('\boxed{', '').replace('}', '')
                    answer = re.sub(r'\\[a-zA-Z]+\{', '', answer)
                
                    self.chat_history[chat_id].append({
                        "role": "assistant",
                        "content": answer
                    })

                    self.db.set("AIModule", "chat_history", self.chat_history)

                    if self.humanmode == 'off':
                        await message.reply(f"<b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ {self.default_model}:</b>\n{answer}")
                    else:
                        await message.reply(answer)

        except aiohttp.ClientError as e:
            await message.reply(f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:</b> {e}\n\nüí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –º–æ–¥—É–ª—è.</b>")

    @loader .unrestricted 
    async def moduleinfocmd (self ,message ):
        """
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.
        """
        info_text ="""
        <b>üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

<b>üìå –ê–≤—Ç–æ—Ä:</b>@MartyyyK

---

<b>üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è:</b>  
1Ô∏è‚É£ <b>–ü–æ–∏—Å–∫ –≤ Google.</b>  
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è <i>–±—ã—Å—Ç—Ä–æ–≥–æ –∏ —Ç–æ—á–Ω–æ–≥–æ</i> –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.  

2Ô∏è‚É£ <b>–ß–∞—Ç —Å –º–æ–¥–µ–ª—å—é –ò–ò.</b>  
- –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥ –≤ –ª—é–±–æ–º —á–∞—Ç–µ.  
- –ò–ò —Ä–∞–∑–ª–∏—á–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–µ—Ä–µ–¥–∞—á–µ <i>–Ω–∏–∫–æ–≤</i>.  
- –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º <i>—É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≤–∞—à–∏—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π.</i>  

3Ô∏è‚É£ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤.</b>  
- –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–ª–∏ –¥–∞–π—Ç–µ –º–æ–¥–µ–ª–∏ –ò–ò –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ –±—ã –æ–Ω–∞ –ª—É—á—à–µ –¥–∞–≤–∞–ª–∞ –æ—Ç–≤–µ—Ç—ã.  
- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ <i>–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã</i> –≤–µ–¥—å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤.  
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>.switchplugin</code> –¥–ª—è <i>–º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è</i> –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.  

4Ô∏è‚É£ <b>–í—ã–±–æ—Ä –¥–æ 21 –º–æ–¥–µ–ª–µ–π –ò–ò.</b>  
–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏.  

5Ô∏è‚É£ <b>–ó–∞–ø—Ä–æ—Å—ã –¥–ª—è Hisa Userbot.</b>  
- –ö–æ–º–∞–Ω–¥—ã /<code>aicreate</code>/<code>aierror</code> –ø–æ–º–æ–≥—É—Ç:  
    üîπ –£–∑–Ω–∞—Ç—å –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ Hisa Userbot.  
    üîπ –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É Hisa Userbot
    üîπ –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å –º–æ–¥—É–ª—å –¥–ª—è Hisa Userbot  

---

        """
        await message .edit (info_text )
