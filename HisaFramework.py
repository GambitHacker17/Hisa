#meta developer: @MartyyyK

import os
import re
import sys
import logging
import asyncio
import requests

from telethon.tl.types import Message
from .. import loader, utils
from ..inline.types import InlineCall, InlineQuery

logger = logging.getLogger(__name__)

async def bash_exec(command: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
    """
    a = await asyncio.create_subprocess_shell(
        command.strip(),
        stdin=asyncio.subprocess.PIPE,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )

    out = await a.stdout.read(-1)
    if not out:
        try:
            return (await a.stderr.read(-1)).decode()
        except UnicodeDecodeError:
            return f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Unicode: {(await a.stderr.read(-1))}"
    else:
        try:
            return out.decode()
        except UnicodeDecodeError:
            return f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Unicode: {out}"


def get_tree(directory, level=0):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤."""
    tree = ""
    for item in sorted(os.listdir(directory)):
        item_path = os.path.join(directory, item)

        if item == "__pycache__" or item == "debug_modules":
            tree += "|   " * level + "|-- " + item + "/\n"
            continue

        if os.path.isdir(item_path):
            tree += "|   " * level + "|-- " + item + "/\n"
            tree += get_tree(item_path, level + 1)
        else:
            if item.endswith(".py") or item in ["__init__.py", "__main__.py"]:
                tree += "|   " * level + "|-- " + f"{item}\n"
    return tree


@loader.tds
class HisaFrameworkMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ Hisa Userbot"""

    strings = {
        "name": "HisaFramework",
        
        "main.info.text": (
            "<b>Hisa Framework</b> - –ª—É—á—à–∏–π <code>–º—É–ª—å—Ç–∏—Ç—É–ª</code> –¥–ª—è –≤–∞—à–µ–≥–æ Hisa Userbot.\n"
            "–ü–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ <b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>, —Ç–∞–∫ –∏ –¥–ª—è <b>–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>.\n"
            "–ò–º–µ–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–æ–º–æ—â–∏ –≤ <b>–∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏</b> –∏ <b>–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏</b> –≤–∞—à–µ–≥–æ Hisa.\n"
            "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç <b>–ø–æ—Ä—Ç–∞–ª –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</b> –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏."
        ),
        
        "config.pip_install": "–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PIP.",
        "config.pip_uninstall": "–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è PIP.",
        "config.version_check": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Hisa.",
        
        "menu.title": "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>",
        "menu.button.files": "üìÇ –î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ Hisa",
        "menu.button.database": "üñäÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        "menu.button.editors": "üìù –ü—Ä–æ—Å—Ç—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã",
        "menu.button.pip_manager": "‚õ©Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä PIP –ø–∞–∫–µ—Ç–æ–≤",
        "menu.button.info": "üöÄ –ò–ù–§–û",
        
        "database.title": "üñäÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–∞—à–µ–≥–æ Hisa.</b>",
        "database.button.enter_value": "üñäÔ∏è –í–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ",
        "database.value_description": "üñäÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        
        "editors.title": "üìù <b>–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π</b>",
        "editors.button.device": "üíª –ò–∑–º–µ–Ω–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
        "editors.button.device.description": "üñäÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
        "editors.button.startup": "‚åõ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞",
        "editors.button.startup.description": "üñäÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ UNIX –≤—Ä–µ–º—è",
        
        "pip_manager.button.add": "‚ûï –¥–æ–±–∞–≤–∏—Ç—å",
        "pip_manager.button.remove": "‚ûñ —É–¥–∞–ª–∏—Ç—å",
        "pip_manager.button.add.description": "‚ûï –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –∏–∑ PyPi",
        "pip_manager.button.remove.description": "‚ûñ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –∏–∑ freeze"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "pip_install",
                "pip install --upgrade --disable-pip-version-check --no-warn-script-location",
                doc=lambda: self.strings("config.pip_install")
            ),
            loader.ConfigValue(
                "pip_uninstall",
                "pip uninstall",
                doc=lambda: self.strings("config.pip_uninstall")
            ),
            loader.ConfigValue(
                "version_check",
                True,
                doc=lambda: self.strings("config.version_check"),
                validator=loader.validators.Boolean(),
            ),
        )
        
    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–≥–¥–∞ —é–∑–µ—Ä–±–æ—Ç –≥–æ—Ç–æ–≤."""
        self.db = db
        if "HisaFramework" not in db.keys():
            db["HisaFramework"] = {}
            db.save()


    @loader.inline_handler()
    async def framework(self, query: InlineQuery):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —á–µ—Ä–µ–∑ inline –±–æ—Ç–∞"""
   
        return {
            "title": "Hisa Framework",
            "description": "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é Hisa framework",
            "message": self.strings("menu.title"),
            "reply_markup": [
                [
                    {
                        "text": self.strings("menu.button.files"),
                        "callback": self.test_files,
                    },
                ],
                [
                    {
                        "text": self.strings("menu.button.database"),
                        "callback": self.database,
                    },
                    {
                        "text": self.strings("menu.button.editors"),
                        "callback": self.editors,
                    },
                ],
                [
                    {
                        "text": self.strings("menu.button.pip_manager"),
                        "callback": self.pip_manager,
                    },
                ],
                [
                    {
                        "text": self.strings("menu.button.info"),
                        "callback": self.info
                    }
                ]
            ]
        }

    @loader.command()
    async def frameworkcmd(self, message: Message):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
        await self.inline.form(
            self.strings("menu.title"),
            reply_markup=[
                [
                    {
                        "text": self.strings("menu.button.files"),
                        "callback": self.test_files,
                    },
                ],
                [
                    {
                        "text": self.strings("menu.button.database"),
                        "callback": self.database,
                    },
                    {
                        "text": self.strings("menu.button.editors"),
                        "callback": self.editors,
                    },
                ],
                [
                    {
                        "text": self.strings("menu.button.pip_manager"),
                        "callback": self.pip_manager,
                    },
                ],
                [
                    {
                        "text": self.strings("menu.button.info"),
                        "callback": self.info
                    }
                ],
            ],
            message=message,
        )

    async def pip_manager_add(self, call: InlineCall, query: str, inline_message_id: str):
        command = self.config["pip_install"]
        stdout = await bash_exec(f"{sys.executable} -m {command} {query}")
        
        output = (
            stdout
            if len(stdout) <= 2000
            else stdout[:-1000]
        )
        
        text = (
            "‚ûï <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n"
            f"<code>{output}</code>"
        )
        
        await call.edit(text)
        
    async def pip_manager_remove(self, call: InlineCall, query: str, inline_message_id: str):
        command = self.config["pip_uninstall"]
        stdout = await bash_exec(f"{sys.executable} -m {command} {query}")
        
        output = (
            stdout
            if len(stdout) <= 2000
            else stdout[:-1000]
        )
        
        text = (
            "‚ûñ <b>–£–¥–∞–ª–µ–Ω–æ!</b>\n"
            f"<code>{output}</code>"
        )
        
        await call.edit(text)
        
    async def pip_manager(self, call: InlineCall):
        
        output = await bash_exec(f"{sys.executable} -m pip freeze")
        
        await call.edit(
            f"<code>{output}</code>",
            reply_markup=[
                {
                    "text": self.strings("pip_manager.button.add"),
                    "input": self.strings("pip_manager.button.add.description"),
                    "handler": self.pip_manager_add,
                    "args": (call.inline_message_id,),
                },
                {
                    "text": self.strings("pip_manager.button.remove"),
                    "input": self.strings("pip_manager.button.remove.description"),
                    "handler": self.pip_manager_remove,
                    "args": (call.inline_message_id,),
                },
            ]
        )
        
    async def info(self, call: InlineCall):
        await call.edit(self.strings("main.info.text"))
        
    async def device(self, call: InlineCall, query: str, inline_message_id: str):
        """–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        utils.get_named_platform = lambda: query
        await call.edit(f"üñäÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {query}!</b>", inline_message_id=inline_message_id)
        
    async def startup(self, call: InlineCall, query: str, inline_message_id: str):
        """–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞."""
        utils.init_ts = int(query)
        await call.edit(f"üñäÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {query}!</b>", inline_message_id=inline_message_id)

    async def editors(self, call: InlineCall):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π."""
        await call.edit(
            self.strings("editors.title"),
            reply_markup=[
                {
                    "text": self.strings("editors.button.device"),
                    "input": self.strings("editors.button.device.description"),
                    "handler": self.device,
                    "args": (call.inline_message_id,),
                },
                {
                    "text": self.strings("editors.button.startup"),
                    "input": self.strings("editors.button.startup.description"),
                    "handler": self.startup,
                    "args": (call.inline_message_id,),
                },
            ]
        )

    async def change_value(self, call: InlineCall, query: str, inline_message_id: str, keys: list):
        """–ò–∑–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        db = self.db
        for key in keys[:-1]:
            db = db[key]

        db[keys[-1]] = query
        self.db.save()

        await call.edit(
            f"üñäÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞</b> <code>{query}</code>",
            inline_message_id=inline_message_id
        )

    async def database_edit(self, call: InlineCall, keys: list):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        value = self.db
        for key in keys:
            value = value[key]

        if isinstance(value, dict):
            await call.edit(
                f"<code>{value}</code>",
                reply_markup=[
                    *[
                        {
                            "text": key,
                            "callback": self.database_edit,
                            "args": (keys + [key],),
                        }
                        for key in value.keys()
                    ]
                ]
            )
        else:
            await call.edit(
                f"<code>{value}</code>",
                reply_markup=[
                    {
                        "text": self.strings("database.button.enter_value"),
                        "input": self.strings("database.value_description"),
                        "handler": self.change_value,
                        "args": (call.inline_message_id, keys,),
                    }
                ]
            )

    async def database(self, call: InlineCall):
        """–†–µ–¥–∞–∫—Ç–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        keys = list(self.db.keys())
    
        button_rows = []
        for i in range(0, len(keys), 5):
            row = [
                {
                    "text": key,
                    "callback": self.database_edit,
                    "args": ([key],),
                }
                for key in keys[i:i + 5]
            ]
            button_rows.append(row)
    
        button_rows.insert(0, [
            {
                "text": "üìå HisaFramework",
                "callback": self.database_edit,
                "args": (["HisaFramework"],),
            },
        ])
    
        await call.edit(
            self.strings["database.title"],
            reply_markup=button_rows
        )

    async def test_files(self, call: InlineCall):
        """–î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤"""
        tree = get_tree("hisa")
        await call.edit(f"<code>{tree}</code>")